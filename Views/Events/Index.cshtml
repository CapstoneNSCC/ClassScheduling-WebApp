@model IndexViewModel

@{
    Layout = "_Layout";
}

<nav class="navbar bg-body-tertiary no-print">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">
            <img src="\lib\images\nscc-logo.jpg" alt="nscc-logo" width="200px" class="d-inline-block ms-3">
        </a>
        @* <div>
        <span id="lblExpire" class="text-warning" style="margin-left:10px">WARNING: You're session is about
        to expire</span>
        </div> *@
        <div class="d-flex flex-row">
            <form method="post">
                <button type="submit" class="btn btn-warning me-3" asp-controller="Admin" asp-action="Index">
                    Dashboard
                </button>
            </form>

            <form method="post">
                <button type="submit" class="btn btn-warning me-3" asp-controller="Admin" asp-action="Logout">
                    Logout
                </button>
            </form>
        </div>
    </div>
</nav>


<div class="admin-cal-container d-flex">
    <div class="admin-controls d-flex no-print">
        <div class="ms-4 mb-5 text-white">
            <h1>Event Dashboard.</h1>
            <div class="fs-5">Welcome @ViewBag.currentUserName</div>

            <form method="post" id="eventOptionForm" action="/Events/chooseEventOption">
                <div><input asp-for="@Model.EventOption" type="radio" name="eventOption" value="1" /> Option 1 </div>
                <div><input asp-for="@Model.EventOption" type="radio" name="eventOption" value="2" /> Option 2 </div>
                <div><input asp-for="@Model.EventOption" type="radio" name="eventOption" value="3" /> Option 3 </div>
                <button type="button" class="btn btn-warning me-3" onclick="submitForm()">Submit</button>
            </form>

        </div>
    </div>
    <div class="calendar-view d-flex flex-column">
        <div id='calendar'></div>
        <div id='calendar2'></div>
        <div id='calendar3'></div>
    </div>
</div>

</div>

<script>
    var chooseCalendar1;
    var chooseCalendar2;
    var chooseCalendar3;
    function submitForm() {
        var selectedOption = document.querySelector('input[name="eventOption"]:checked');

        if (selectedOption) {
            var selectedValue = selectedOption.value;


            if (selectedValue === "1") {
                selectedCalendar = chooseCalendar1;
            } else if (selectedValue === "2") {
                selectedCalendar = chooseCalendar2;
            } else if (selectedValue === "3") {
                selectedCalendar = chooseCalendar3;
            }

            console.log(selectedCalendar);

            $.ajax({
                type: 'POST',
                url: '/api/Events/chooseEventOption',
                data: JSON.stringify(selectedCalendar),
                contentType: 'application/json',
                success: function (response) {
                    window.location.href = "/Admin";
                },
                error: function (xhr, status, error) {
                    console.error('Error saving events:', error);
                }
            })
        } else {
            alert('Please select an option.');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        renderCalendar1();
        renderCalendar2();
        renderCalendar3();
    })

    function renderCalendar1() {
        const calendarEl = document.getElementById('calendar')
        const calendar = new FullCalendar.Calendar(calendarEl, {
            lazyFetching: false,
            initialView: 'timeGridWeek',
            slotMinTime: '08:00',
            slotMaxTime: '18:00',
            slotDuration: '00:30:00',
            slotLabelInterval: '01:00:00',
            height: '720px',
            themeSystem: 'bootstrap5',
            navLinks: false,
            weekends: false,
            allDaySlot: false,
            eventMinHeight: 30,
            headerToolbar: false,
            dayHeaderFormat: { weekday: 'long' },
            nowIndicator: false,
            slotLabelFormat: {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true,
                meridiem: 'short'
            },
            eventDisplay: 'block',
            events: '/api/Events',
            eventContent: function (e) {
                let timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true }

                let title = e.event.title;
                let className = e.event.extendedProps.description;
                let startTime = e.event.start;
                let endTime = e.event.end;
                let teacher = e.event.extendedProps.teacher;
                let classroom = e.event.extendedProps.classroom;

                let titleEl = document.createElement('div')
                titleEl.classList = ['title title2']
                titleEl.innerHTML = title;

                let easyNameEl = document.createElement('div')
                easyNameEl.classList = ['easyname1 easyname2']
                easyNameEl.innerHTML = className;

                let roomEl = document.createElement('div')
                roomEl.classList = ['easyname1 easyname2']
                roomEl.innerHTML = classroom;

                let timeEl = document.createElement('div')
                timeEl.classList = ['class1 class2']
                timeEl.innerHTML = `${startTime.toLocaleString('en-US', timeOptions)} - ${endTime.toLocaleString('en-US', timeOptions)}`

                let teacherEl = document.createElement('div')
                teacherEl.classList = ['easyname1 easyname2']
                teacherEl.innerHTML = teacher;

                let arrayOfDomNodes = [titleEl, easyNameEl, timeEl, roomEl, teacherEl]
                return { domNodes: arrayOfDomNodes }
            },
            eventMouseEnter: function (e) {

                let popover = bootstrap.Popover.getOrCreateInstance(e.el, {
                    title: e.event.title + " " + e.event.extendedProps.description,
                    content: `
            <div class="test">${e.event.extendedProps.description}</div>
            <div class="test">${new Date(e.event.startStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })} - ${new Date(e.event.endStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>
            <div class="test">${e.event.extendedProps.classroom}</div>
            <div class="teacher">${e.event.extendedProps.teacher}</div>
        `,
                    html: true,
                    trigger: 'hover'
                })

                popover.toggle()
            },
        })

        // Obtenha a lista de eventos da primeira opção
        var eventsOption1 = @Html.Raw(Json.Serialize(Model.EventOptions["Option1"]));
        chooseCalendar1 = @Html.Raw(Json.Serialize(Model.EventOptions["Option1"]));

        // Itere sobre cada evento e adicione ao calendário
        eventsOption1.forEach(function (event) {
            calendar.addEvent({
                title: event.courseCode,
                description: event.courseName,
                daysOfWeek: event.daysOfWeekArray,
                startTime: event.startTimeStr,
                endTime: event.endTimeStr,
                teacher: event.professor,
                classroom: event.classroom
            });
        });

        calendar.render()
    }
    function renderCalendar2() {
        const calendarEl = document.getElementById('calendar2')
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            slotMinTime: '08:00',
            slotMaxTime: '18:00',
            slotDuration: '00:30:00',
            slotLabelInterval: '01:00:00',
            height: '855px',
            themeSystem: 'bootstrap5',
            navLinks: false,
            weekends: false,
            allDaySlot: false,
            eventMinHeight: 30,
            headerToolbar: {
                start: '',
                center: '',
                end: '',
            },
            dayHeaderFormat: { weekday: 'long' },
            nowIndicator: true,
            slotLabelFormat: {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true,
                meridiem: 'short'
            },
            eventDisplay: 'block',
            events: '/api/Events',
            eventContent: function (e) {
    @* console.log(e.event); *@

                    let timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true }

                let title = e.event.title;
                let className = e.event.extendedProps.description;
                let startTime = e.event.start;
                let endTime = e.event.end;
                let teacher = e.event.extendedProps.teacher;
                let classroom = e.event.extendedProps.classroom;


                let titleEl = document.createElement('div')
                titleEl.classList = ['title title2']
                titleEl.innerHTML = title;

                let easyNameEl = document.createElement('div')
                easyNameEl.classList = ['easyname1 easyname2']
                easyNameEl.innerHTML = className;

                let roomEl = document.createElement('div')
                roomEl.classList = ['easyname1 easyname2']
                roomEl.innerHTML = classroom;

                let timeEl = document.createElement('div')
                timeEl.classList = ['class1 class2']
                timeEl.innerHTML = `${startTime.toLocaleString('en-US', timeOptions)} - ${endTime.toLocaleString('en-US', timeOptions)}`

                let teacherEl = document.createElement('div')
                teacherEl.classList = ['easyname1 easyname2']
                teacherEl.innerHTML = teacher;

                let arrayOfDomNodes = [titleEl, easyNameEl, timeEl, roomEl, teacherEl]
                return { domNodes: arrayOfDomNodes }
            },
            eventMouseEnter: function (e) {
                let popover = bootstrap.Popover.getOrCreateInstance(e.el, {
                    title: e.event.extendedProps.courseCode + " " + e.event.extendedProps.courseName,
                    content: `
            <div class="test">${e.event.extendedProps.program}</div>
            <div class="test">${new Date(e.event.startStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })} - ${new Date(e.event.endStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>
            <div class="test">${e.event.extendedProps.classroom}</div>
            <div class="teacher">${e.event.extendedProps.professor}</div>
          `,
                    html: true,
                    trigger: 'hover'
                })

                popover.toggle()
            },
        })

        // Obtenha a lista de eventos da primeira opção
        var eventsOption1 = @Html.Raw(Json.Serialize(Model.EventOptions["Option2"]));
        chooseCalendar2 = @Html.Raw(Json.Serialize(Model.EventOptions["Option2"]));

        // Itere sobre cada evento e adicione ao calendário
        eventsOption1.forEach(function (event) {
            calendar.addEvent({
                title: event.courseCode,
                description: event.courseName,
                daysOfWeek: event.daysOfWeekArray,
                startTime: event.startTimeStr,
                endTime: event.endTimeStr,
                teacher: event.professor,
                classroom: event.classroom
            });
        });


        calendar.render()
    }
    function renderCalendar3() {
        const calendarEl = document.getElementById('calendar3')
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            slotMinTime: '08:00',
            slotMaxTime: '18:00',
            slotDuration: '00:30:00',
            slotLabelInterval: '01:00:00',
            height: '855px',
            themeSystem: 'bootstrap5',
            navLinks: false,
            weekends: false,
            allDaySlot: false,
            eventMinHeight: 30,
            headerToolbar: {
                start: '',
                center: '',
                end: '',
            },
            dayHeaderFormat: { weekday: 'long' },
            nowIndicator: true,
            slotLabelFormat: {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true,
                meridiem: 'short'
            },
            eventDisplay: 'block',
            events: '/api/Events',
            eventContent: function (e) {
    @* console.log(e.event); *@

                    let timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true }

                let title = e.event.title;
                let className = e.event.extendedProps.description;
                let startTime = e.event.start;
                let endTime = e.event.end;
                let teacher = e.event.extendedProps.teacher;
                let classroom = e.event.extendedProps.classroom;


                let titleEl = document.createElement('div')
                titleEl.classList = ['title title2']
                titleEl.innerHTML = title;

                let easyNameEl = document.createElement('div')
                easyNameEl.classList = ['easyname1 easyname2']
                easyNameEl.innerHTML = className;

                let roomEl = document.createElement('div')
                roomEl.classList = ['easyname1 easyname2']
                roomEl.innerHTML = classroom;

                let timeEl = document.createElement('div')
                timeEl.classList = ['class1 class2']
                timeEl.innerHTML = `${startTime.toLocaleString('en-US', timeOptions)} - ${endTime.toLocaleString('en-US', timeOptions)}`

                let teacherEl = document.createElement('div')
                teacherEl.classList = ['easyname1 easyname2']
                teacherEl.innerHTML = teacher;

                let arrayOfDomNodes = [titleEl, easyNameEl, timeEl, roomEl, teacherEl]
                return { domNodes: arrayOfDomNodes }
            },
            eventMouseEnter: function (e) {
                let popover = bootstrap.Popover.getOrCreateInstance(e.el, {
                    title: e.event.extendedProps.courseCode + " " + e.event.extendedProps.courseName,
                    content: `
            <div class="test">${e.event.extendedProps.program}</div>
            <div class="test">${new Date(e.event.startStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })} - ${new Date(e.event.endStr).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>
            <div class="test">${e.event.extendedProps.classroom}</div>
            <div class="teacher">${e.event.extendedProps.professor}</div>
          `,
                    html: true,
                    trigger: 'hover'
                })

                popover.toggle()
            },
        })

        // Obtenha a lista de eventos da primeira opção
        var eventsOption1 = @Html.Raw(Json.Serialize(Model.EventOptions["Option3"]));
        chooseCalendar3 = @Html.Raw(Json.Serialize(Model.EventOptions["Option3"]));

        // Itere sobre cada evento e adicione ao calendário
        eventsOption1.forEach(function (event) {
            calendar.addEvent({
                title: event.courseCode,
                description: event.courseName,
                daysOfWeek: event.daysOfWeekArray,
                startTime: event.startTimeStr,
                endTime: event.endTimeStr,
                teacher: event.professor,
                classroom: event.classroom
            });
        });


        calendar.render()
    }
</script>