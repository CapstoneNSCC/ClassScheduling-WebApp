@model List<ClassScheduling_WebApp.Models.ProgramModel>

@{
  Layout = "_Layout";
}

<nav class="navbar bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">
      <img src="\lib\images\nscc-logo.jpg" alt="nscc-logo" width="200px" class="d-inline-block ms-3">
    </a>
    @* <div>
    <span id="lblExpire" class="text-warning" style="margin-left:10px">WARNING: You're session is about
    to expire</span>
    </div> *@
    <div class="d-flex flex-row">
      <form method="post">
        <button type="submit" class="btn btn-warning me-3" asp-controller="Admin" asp-action="Logout">
          Logout
        </button>
      </form>
    </div>
  </div>
</nav>


<div class="admin-cal-conatiner">
  <div class="admin-controls">
    <div class="p-5 text-white">
      <h1>Admin Dashboard.</h1>
      <div class="fs-5">message here.</div>

      <div class="mt-3">
        <a asp-controller="Programs" asp-action="Index" asp-route-programs="@Model"
          class="dashboard-button btn btn-warning">Manage
          Programs</a>
      </div>

      <div class="mt-3">
        <a asp-controller="Login" asp-action="UserIndex" asp-route-programs="@Model"
          class="dashboard-button btn btn-warning">Manage
          Users</a>
      </div>

      <div class="mt-3">
        <a asp-controller="Technology" asp-action="Index" asp-route-programs="@Model"
          class="dashboard-button btn btn-warning">Manage
          Technology</a>
      </div>

      <div class="mt-3">
        <a asp-controller="Classroom" asp-action="Index" asp-route-programs="@Model"
          class="dashboard-button btn btn-warning">Manage
          Classrooms</a>
      </div>

      <div class="mt-3">
        <a asp-controller="Schedule" asp-action="Index" asp-route-programs="@Model"
          class="dashboard-button btn btn-light">Generate Schedule</a>
      </div>
    </div>
  </div>

  <div class="fc toolbar">
    <div class="fc-header-toolbar fc-toolbar">
      <div class="fc-toolbar-chunk">
        <select id="selectedProgram" name="selectedProgram" class="form-select dashboard-button">
          <option value="-1">All</option>
          @foreach (var item in ViewBag.IdProgram as SelectList)
          {
                      <option value="@item.Value">@item.Text</option>
          }
        </select>
      </div>
      <div class="fc-toolbar-chunk"></div>
      <div class="fc-toolbar-chunk">
        <button type="button" title="Print" class="fc-printButton-button fc-button fc-button-primary">Print</button>
      </div>
    </div>
  </div>
  <div id='calendar'>

  </div>

</div>

<script>

  $(document).ready(()=> {
    const defaultApiEndpoint = '/api/Events'
    let apiEndpoint =defaultApiEndpoint

     // button initizliations
    const printButton = document.getElementsByClassName('fc-printButton-button')
    printButton[0].onclick = () => {
      window.print()
    }

    // dropdown initializations
    const programDropdown = document.getElementById('selectedProgram')
    programDropdown.onchange = (e) => {
      let programId = e.target.value

      if (programId == -1) {
        apiEndpoint = defaultApiEndpoint
      } else {
        apiEndpoint = `${defaultApiEndpoint}/program/${programId}`
      }

      // get all sources in calendar
      let sources = calendar.getEventSources()

      // remove them so the calendar can update
      sources.forEach((source) => {
        source.remove()
      })

      // add new api endpoint to calendar
      calendar.addEventSource(apiEndpoint)
      calendar.refetchEvents()
    }


    // calendar initialization
    const calendarEl = document.getElementById('calendar')
    const calendar = new FullCalendar.Calendar(calendarEl, {
      lazyFetching: false,
      initialView: 'timeGridWeek',
      slotMinTime: '08:00',
      slotMaxTime: '18:00',
      slotDuration: '00:30:00',
      slotLabelInterval: '01:00:00',
      height: '782px',
      themeSystem: 'bootstrap5',
      navLinks: false,
      weekends: false,
      allDaySlot: false,
      eventMinHeight: 30,
      headerToolbar: false,
      dayHeaderFormat: { weekday: 'long' },
      nowIndicator: true,
      slotLabelFormat: {
        hour: 'numeric',
        minute: '2-digit',
        omitZeroMinute: true,
        meridiem: 'short'
      },
      eventDisplay: 'block',
      events: apiEndpoint,
      eventContent: (e) => {

        let timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true }

        let title = e.event.title;
        let className = e.event.extendedProps.description;
        let startTime = e.event.start;
        let endTime = e.event.end;
        let teacher = e.event.extendedProps.teacher;
        let classroom = e.event.extendedProps.classroom;


        let titleEl = document.createElement('div')
        titleEl.classList = ['title title2']
        titleEl.innerHTML = title;

        let easyNameEl = document.createElement('div')
        easyNameEl.classList = ['easyname1 easyname2']
        easyNameEl.innerHTML = className;

        let roomEl = document.createElement('div')
        roomEl.classList = ['easyname1 easyname2']
        roomEl.innerHTML = classroom;

        let timeEl = document.createElement('div')
        timeEl.classList = ['class1 class2']
        timeEl.innerHTML = `${startTime.toLocaleString('en-US', timeOptions)} - ${endTime.toLocaleString('en-US', timeOptions)}`

        let teacherEl = document.createElement('div')
        teacherEl.classList = ['easyname1 easyname2']
        teacherEl.innerHTML = teacher;

        let arrayOfDomNodes = [titleEl, easyNameEl, timeEl, roomEl, teacherEl]
        return { domNodes: arrayOfDomNodes }
      },
      eventMouseEnter: (e) => {
        let popover = bootstrap.Popover.getOrCreateInstance(e.el, {
          title: e.event.title,
          content: `
<div class="test">${e.event.extendedProps.teacher}</div>
`,
          html: true,
          trigger: 'hover'
        })

        popover.toggle();
      },
    })

    calendar.render()
  })

</script>